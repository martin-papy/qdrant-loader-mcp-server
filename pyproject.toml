[build-system]
requires = [
    "hatchling",
]
build-backend = "hatchling.build"

[project]
name = "qdrant-loader-mcp-server"
version = "0.1.0"
description = "A Model Context Protocol (MCP) server that provides RAG capabilities to Cursor using Qdrant."
readme = "README.md"
requires-python = ">=3.12"
license = "GPL-3.0"
keywords = [
    "qdrant",
    "vector-database",
    "mcp",
    "cursor",
    "rag",
    "embeddings",
]
authors = [
    { name = "Martin Papy", email = "martin.papy@gmail.com" },
]
dependencies = [
    "fastapi>=0.104.0",
    "uvicorn>=0.24.0",
    "qdrant-client>=1.6.0",
    "openai>=1.3.0",
    "pydantic>=2.4.2",
    "python-dotenv>=1.0.0",
    "jsonrpcclient>=4.0.3",
    "jsonrpcserver>=5.0.7",
    "structlog>=23.0.0",
    "PyYAML>=6.0.0",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

[project.urls]
Documentation = "https://github.com/martin-papy/qdrant-loader-mcp-server#readme"
Repository = "https://github.com/martin-papy/qdrant-loader-mcp-server"
Issues = "https://github.com/martin-papy/qdrant-loader-mcp-server/issues"

[project.scripts]
mcp-server = "src.main:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "pre-commit>=3.5.0",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
python_files = [
    "test_*.py",
]
addopts = "--cov=src --cov-report=term-missing --import-mode=importlib"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
markers = [
    "integration: mark test as integration test",
]
filterwarnings = [
    "ignore::UserWarning:qdrant_loader_mcp_server.mcp",
]

[tool.coverage.run]
source = [
    "src",
]
omit = [
    "tests/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.black]
line-length = 100
target-version = [
    "py312",
]
include = "\\.pyi?$"
extend-exclude = "# A regex preceded with ^/ will apply only to files and directories\n# in the root of the project.\n^/docs/\n"

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",
    "F",
    "I",
    "B",
    "C4",
    "UP",
    "N",
    "RUF",
]
ignore = [
    "E501",
]

[tool.ruff.isort]
known-first-party = [
    "qdrant_loader_mcp_server",
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "S101",
] 